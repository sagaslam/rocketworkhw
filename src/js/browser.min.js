// browser.js (ESM version)
// v1.0.1 | @ajlkn | MIT licensed

const browser = {
  name: null,
  version: null,
  os: null,
  osVersion: null,
  touch: null,
  mobile: null,
  _canUse: null,

  canUse: function (e) {
    browser._canUse ||= document.createElement('div')
    const n = browser._canUse.style
    const r = e.charAt(0).toUpperCase() + e.slice(1)
    return (
      e in n ||
      'Moz' + r in n ||
      'Webkit' + r in n ||
      'O' + r in n ||
      'ms' + r in n
    )
  },

  init: function () {
    const e = navigator.userAgent
    let name = 'other'
    let version = 0

    const browsers = [
      ['firefox', /Firefox\/([0-9.]+)/],
      ['bb', /BlackBerry.+Version\/([0-9.]+)/],
      ['bb', /BB[0-9]+.+Version\/([0-9.]+)/],
      ['opera', /OPR\/([0-9.]+)/],
      ['opera', /Opera\/([0-9.]+)/],
      ['edge', /Edge\/([0-9.]+)/],
      ['safari', /Version\/([0-9.]+).+Safari/],
      ['chrome', /Chrome\/([0-9.]+)/],
      ['ie', /MSIE ([0-9]+)/],
      ['ie', /Trident\/.+rv:([0-9]+)/]
    ]

    for (let [n, regex] of browsers) {
      if (e.match(regex)) {
        name = n
        version = parseFloat(RegExp.$1)
        break
      }
    }

    browser.name = name
    browser.version = version

    name = 'other'
    version = 0

    const osList = [
      [
        'ios',
        /([0-9_]+) like Mac OS X/,
        (x) => x.replace('_', '.').replace('_', '')
      ],
      ['ios', /CPU like Mac OS X/, () => 0],
      ['wp', /Windows Phone ([0-9.]+)/, null],
      ['android', /Android ([0-9.]+)/, null],
      [
        'mac',
        /Macintosh.+Mac OS X ([0-9_]+)/,
        (x) => x.replace('_', '.').replace('_', '')
      ],
      ['windows', /Windows NT ([0-9.]+)/, null],
      ['bb', /BlackBerry.+Version\/([0-9.]+)/, null],
      ['bb', /BB[0-9]+.+Version\/([0-9.]+)/, null],
      ['linux', /Linux/, null],
      ['bsd', /BSD/, null],
      ['unix', /X11/, null]
    ]

    for (let [osName, regex, parser] of osList) {
      if (e.match(regex)) {
        name = osName
        version = parseFloat(parser ? parser(RegExp.$1) : RegExp.$1)
        break
      }
    }

    if (
      name === 'mac' &&
      'ontouchstart' in window &&
      ((screen.width === 1024 && screen.height === 1366) ||
        (screen.width === 834 && screen.height === 1112) ||
        (screen.width === 810 && screen.height === 1080) ||
        (screen.width === 768 && screen.height === 1024))
    ) {
      name = 'ios'
    }

    browser.os = name
    browser.osVersion = version
    browser.touch =
      browser.os === 'wp'
        ? navigator.msMaxTouchPoints > 0
        : 'ontouchstart' in window
    browser.mobile = ['wp', 'android', 'ios', 'bb'].includes(browser.os)
  }
}

browser.init()

export default browser
