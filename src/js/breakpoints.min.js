// breakpoints.js (Modernized for ES Modules)

const breakpoints = (function () {
  'use strict'
  function e(e) {
    t.init(e)
  }

  const t = {
    list: null,
    media: {},
    events: [],
    init(e) {
      t.list = e
      window.addEventListener('resize', t.poll)
      window.addEventListener('orientationchange', t.poll)
      window.addEventListener('load', t.poll)
      window.addEventListener('fullscreenchange', t.poll)
    },
    active(e) {
      let n, a, s, i, r, d, c

      if (!(e in t.media)) {
        if (
          (e.startsWith('>=')
            ? ((a = 'gte'), (n = e.slice(2)))
            : e.startsWith('<=')
            ? ((a = 'lte'), (n = e.slice(2)))
            : e.startsWith('>')
            ? ((a = 'gt'), (n = e.slice(1)))
            : e.startsWith('<')
            ? ((a = 'lt'), (n = e.slice(1)))
            : e.startsWith('!')
            ? ((a = 'not'), (n = e.slice(1)))
            : ((a = 'eq'), (n = e)),
          n && n in t.list)
        ) {
          i = t.list[n]
          if (Array.isArray(i)) {
            r = parseInt(i[0])
            d = parseInt(i[1])

            if (isNaN(r)) {
              if (isNaN(d)) return
              c = i[1].substring(String(d).length)
            } else c = i[0].substring(String(r).length)

            if (isNaN(r)) {
              switch (a) {
                case 'gte':
                  s = 'screen'
                  break
                case 'lte':
                  s = `screen and (max-width: ${d}${c})`
                  break
                case 'gt':
                  s = `screen and (min-width: ${d + 1}${c})`
                  break
                case 'lt':
                  s = 'screen and (max-width: -1px)'
                  break
                case 'not':
                  s = `screen and (min-width: ${d + 1}${c})`
                  break
                default:
                  s = `screen and (max-width: ${d}${c})`
              }
            } else if (isNaN(d)) {
              switch (a) {
                case 'gte':
                  s = `screen and (min-width: ${r}${c})`
                  break
                case 'lte':
                  s = 'screen'
                  break
                case 'gt':
                  s = 'screen and (max-width: -1px)'
                  break
                case 'lt':
                  s = `screen and (max-width: ${r - 1}${c})`
                  break
                case 'not':
                  s = `screen and (max-width: ${r - 1}${c})`
                  break
                default:
                  s = `screen and (min-width: ${r}${c})`
              }
            } else {
              switch (a) {
                case 'gte':
                  s = `screen and (min-width: ${r}${c})`
                  break
                case 'lte':
                  s = `screen and (max-width: ${d}${c})`
                  break
                case 'gt':
                  s = `screen and (min-width: ${d + 1}${c})`
                  break
                case 'lt':
                  s = `screen and (max-width: ${r - 1}${c})`
                  break
                case 'not':
                  s = `screen and (max-width: ${
                    r - 1
                  }${c}), screen and (min-width: ${d + 1}${c})`
                  break
                default:
                  s = `screen and (min-width: ${r}${c}) and (max-width: ${d}${c})`
              }
            }
          } else {
            s = i.charAt(0) === '(' ? 'screen and ' + i : i
          }

          t.media[e] = !!s && s
        }
      }

      return t.media[e] !== false && window.matchMedia(t.media[e]).matches
    },
    on(e, n) {
      t.events.push({ query: e, handler: n, state: false })
      if (t.active(e)) n()
    },
    poll() {
      for (let e = 0; e < t.events.length; e++) {
        const n = t.events[e]
        if (t.active(n.query)) {
          if (!n.state) {
            n.state = true
            n.handler()
          }
        } else if (n.state) {
          n.state = false
        }
      }
    }
  }

  // Public API
  e._ = t
  e.on = t.on
  e.active = t.active

  return e
})()

// Export as ES Module
export default breakpoints
